name: Build ImmortalWrt Firmware优化处理

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGEBUILDER_URL: "https://downloads.immortalwrt.org/releases/24.10.1/targets/x86/64/immortalwrt-imagebuilder-24.10.1-x86-64.Linux-x86_64.tar.zst"
      IMAGEBUILDER_ARCHIVE: "immortalwrt-imagebuilder-24.10.1-x86-64.Linux-x86_64.tar.zst"
      SOFTS_DIR: "softs"
      PLUGINS_FILE: "plugins.list"
      OUTPUT_DIR: "output"
      IMAGE_SIZE: "2048MB"
      ROOTFS_SIZE: "2048"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        path: "source"

    - name: Install dependencies
      run: |
        sudo apt update -y
        sudo apt install -y \
          build-essential ccache cmake curl flex gawk gettext git \
          libncurses-dev libssl-dev python3 python3-pip rsync unzip \
          wget zlib1g-dev zstd p7zip-full jq
        
        # 确保安装zstd解压工具
        sudo apt install -y zstd

    - name: Download and extract ImageBuilder
      id: extract_imagebuilder
      run: |
        # 增加下载重试和备用镜像
        echo "下载ImageBuilder: $IMAGEBUILDER_URL"
        for i in {1..3}; do
          if wget --tries=3 --waitretry=30 --retry-connrefused "$IMAGEBUILDER_URL"; then
            echo "✅ 下载成功"
            break
          else
            echo "⚠️ 下载尝试 $i/3 失败，重试中..."
            sleep 10
          fi
        done
        
        # 如果下载失败，尝试备用镜像
        if [ ! -f "$IMAGEBUILDER_ARCHIVE" ]; then
          echo "⚠️ 主镜像下载失败，尝试备用镜像..."
          ALT_URL="https://archive.immortalwrt.org/releases/24.10.1/targets/x86/64/immortalwrt-imagebuilder-24.10.1-x86-64.Linux-x86_64.tar.zst"
          wget -O "$IMAGEBUILDER_ARCHIVE" "$ALT_URL" || { echo "❌ 备用镜像下载失败"; exit 1; }
        fi
        
        # 解压前检查文件完整性
        if ! zstd -t "$IMAGEBUILDER_ARCHIVE"; then
          echo "❌ 压缩文件损坏: $IMAGEBUILDER_ARCHIVE"
          exit 1
        fi
        
        # 解压文件
        echo "解压ImageBuilder..."
        if ! tar -I zstd -xf "$IMAGEBUILDER_ARCHIVE"; then
          echo "❌ 解压失败: $IMAGEBUILDER_ARCHIVE"
          exit 1
        fi
        
        # 动态获取解压后的目录名
        IMAGEBUILDER_DIR=$(ls -d immortalwrt-imagebuilder-* | head -1)
        if [ -z "$IMAGEBUILDER_DIR" ]; then
          echo "❌ 无法找到ImageBuilder目录"
          ls -la
          exit 1
        fi
        
        echo "检测到ImageBuilder目录: $IMAGEBUILDER_DIR"
        echo "IMAGEBUILDER_DIR=$IMAGEBUILDER_DIR" >> $GITHUB_ENV

    - name: Prepare custom IPK packages
      run: |
        echo "准备自定义IPK包..."
        mkdir -p "$IMAGEBUILDER_DIR/packages/custom"
        
        # 安全处理可能不存在的softs目录
        if [ -d "source/$SOFTS_DIR" ]; then
          echo "在source/$SOFTS_DIR中查找IPK文件..."
          # 查找所有IPK文件
          ipk_files=$(find "source/$SOFTS_DIR" -name '*.ipk' -print)
          
          if [ -n "$ipk_files" ]; then
            count=$(echo "$ipk_files" | wc -l)
            echo "找到 $count 个IPK文件"
            echo "$ipk_files" | while read -r ipk; do
              cp -v "$ipk" "$IMAGEBUILDER_DIR/packages/custom/"
            done
          else
            echo "⚠️ 在source/$SOFTS_DIR中没有找到IPK文件"
          fi
        else
          echo "⚠️ source/$SOFTS_DIR目录不存在，跳过自定义包"
        fi

    - name: Parse plugins and packages
      id: get_pkgs
      run: |
        # 安全读取插件列表
        BASE_PKGS=""
        if [ -f "source/$PLUGINS_FILE" ]; then
          echo "读取插件文件: source/$PLUGINS_FILE"
          # 过滤注释和空行
          BASE_PKGS=$(grep -vE '^#|^\s*$' "source/$PLUGINS_FILE" | sed 's/#.*//' | tr '\n' ' ' | sed 's/[[:space:]]*$//')
          echo "基础包: $BASE_PKGS"
        else
          echo "⚠️ source/$PLUGINS_FILE 不存在，使用空基础包"
        fi

        # 获取自定义IPK包名
        CUSTOM_PKGS=""
        if [ -d "$IMAGEBUILDER_DIR/packages/custom" ]; then
          echo "扫描自定义IPK包..."
          for ipk in "$IMAGEBUILDER_DIR/packages/custom/"*.ipk; do
            # 处理无文件匹配的情况
            [ -e "$ipk" ] || continue
            pkgname=$(basename "$ipk" | awk -F_ '{print $1}')
            [ -n "$pkgname" ] && CUSTOM_PKGS="$CUSTOM_PKGS $pkgname"
          done
          echo "自定义IPK包: $CUSTOM_PKGS"
        fi

        # 合并并去重
        ALL_PKGS=$(echo "$BASE_PKGS $CUSTOM_PKGS" | tr ' ' '\n' | sort -u | xargs)
        
        # 验证包列表非空
        if [ -z "$ALL_PKGS" ]; then
          echo "⚠️ 最终包列表为空，将使用默认配置"
          ALL_PKGS=""  # 传递空字符串
        fi
        
        echo "最终包列表: $ALL_PKGS"
        echo "FINAL_PKGS=$ALL_PKGS" >> $GITHUB_ENV

    - name: Build firmware
      run: |
        echo "进入ImageBuilder目录: $IMAGEBUILDER_DIR"
        cd "$IMAGEBUILDER_DIR" || { echo "❌ 无法进入目录: $IMAGEBUILDER_DIR"; exit 1; }
        
        # 打印当前目录内容
        echo "当前目录内容:"
        ls -la
        
        # 确保配置文件存在
        [ ! -f .config ] && touch .config
        echo "CONFIG_TARGET_ROOTFS_PARTSIZE=$ROOTFS_SIZE" >> .config
        echo "配置内容:"
        cat .config
        
        # 创建files目录（如果不存在）
        if [ ! -d "source/files" ]; then
          echo "⚠️ source/files目录不存在，创建空目录"
          mkdir -p "source/files"
        fi
        
        echo "==== 开始构建 [$(date '+%Y-%m-%d %H:%M:%S')] ===="
        echo "使用包: $FINAL_PKGS"
        echo "文件目录: source/files"
        echo "镜像大小: $IMAGE_SIZE"
        
        # 设置详细日志
        set -x
        # 修复：ImmortalWrt使用'make'而不是'make image'
        make \
          PACKAGES="$FINAL_PKGS" \
          FILES="source/files" \
          IMAGE_SIZE="$IMAGE_SIZE" \
          V=s -j$(($(nproc) + 1))
        set +x
        
        # 检查构建结果
        if ! ls bin/targets/x86/64/*.img.gz >/dev/null 2>&1; then
          echo "❌ 构建失败：未找到固件文件" >&2
          echo "构建目录内容:"
          ls -R bin/targets || true
          exit 1
        fi
        
        mkdir -p "source/$OUTPUT_DIR"
        cp -v bin/targets/x86/64/* "source/$OUTPUT_DIR/"
        echo "✅ 固件已保存到: source/$OUTPUT_DIR"

    - name: Upload firmware artifacts
      uses: actions/upload-artifact@v4
      with:
        name: immortalwrt-x86-64
        path: source/${{ env.OUTPUT_DIR }}
        retention-days: 3

    - name: Generate release tag
      id: release_tag
      run: |
        tag="auto-build-$(date -u +'%Y%m%d-%H%M%S')"
        echo "tag=$tag" >> $GITHUB_OUTPUT
        echo "::notice::生成发布标签: $tag"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: success()
      with:
        tag_name: ${{ steps.release_tag.outputs.tag }}
        name: "ImmortalWrt x86_64 [${{ steps.release_tag.outputs.tag }}]"
        body: |
          ### 自动化构建结果
          **构建时间:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          **包含包:**
          ```plaintext
          ${{ env.FINAL_PKGS }}
          ```
          [查看完整日志](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        files: source/${{ env.OUTPUT_DIR }}/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
