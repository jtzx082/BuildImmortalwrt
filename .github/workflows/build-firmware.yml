name: Build ImmortalWrt Firmware

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGEBUILDER_URL: "https://downloads.immortalwrt.org/releases/24.10.1/targets/x86/64/immortalwrt-imagebuilder-24.10.1-x86-64.Linux-x86_64.tar.zst"
      IMAGEBUILDER_ARCHIVE: "immortalwrt-imagebuilder-24.10.1-x86-64.Linux-x86_64.tar.zst"
      IMAGEBUILDER_DIR: "immortalwrt-imagebuilder-24.10.1-x86-64.Linux-x86_64"
      SOFTS_DIR: "softs"
      PLUGINS_FILE: "plugins.list"
      OUTPUT_DIR: "output"
      IMAGE_SIZE: "1024MB"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt update -y
        sudo apt full-upgrade -y
        sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
        g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
        libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev \
        libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano \
        ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils \
        python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs \
        upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd

    - name: Download ImmortalWrt ImageBuilder
      run: |
        wget $IMAGEBUILDER_URL
        tar -I zstd -xf $IMAGEBUILDER_ARCHIVE

    - name: Prepare custom IPK packages
      run: |
        mkdir -p $IMAGEBUILDER_DIR/packages/custom
        if [ -d "$SOFTS_DIR" ]; then
          find "$SOFTS_DIR" -maxdepth 1 -type f -name '*.ipk' -exec cp {} "$IMAGEBUILDER_DIR/packages/custom/" \;
        fi

    - name: Parse plugins.list to get package names
      id: plugins
      run: |
        if [ -f "$PLUGINS_FILE" ]; then
          PKGS=$(grep -vE '^\s*#|^\s*$' $PLUGINS_FILE | tr '\n' ' ')
          echo "PKGS=${PKGS}" >> "$GITHUB_ENV"
        else
          echo "No plugins.list file found!"
          exit 1
        fi

    - name: Build firmware
      run: |
        cd $IMAGEBUILDER_DIR
        # 自动查找 custom/*.ipk，拼接包名字符串
        CUSTOM_PKGS=""
        for ipk in packages/custom/*.ipk; do
          [ -e "$ipk" ] || continue
          pkgname=$(basename "$ipk" | sed 's/_.*//')
          CUSTOM_PKGS="$CUSTOM_PKGS $pkgname"
        done

        make image \
          EXTRA_PACKAGES="$CUSTOM_PKGS $PKGS" \
          FILES=../files \
          IMAGE_SIZE="$IMAGE_SIZE" \
          -j$(nproc)
        mkdir -p ../$OUTPUT_DIR
        cp -r bin/targets/x86/64/* ../$OUTPUT_DIR/

    - name: Upload firmware to Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: immortalwrt-x86-64
        path: ${{ env.OUTPUT_DIR }}

    - name: Generate release tag
      id: release_tag
      run: |
        echo "tag=auto-build-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.release_tag.outputs.tag }}
        name: "ImmortalWrt x86_64 Firmware ${{ steps.release_tag.outputs.tag }}"
        body: |
          This is an automated build of ImmortalWrt x86_64 firmware.
        files: ${{ env.OUTPUT_DIR }}/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
