name: Build ImmortalWrt Firmware Docker

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (e.g., v1.0)'
        required: true
        default: 'nightly'
      image_size:
        description: 'Firmware image size (e.g., 2048MB)'
        required: false
        default: '2048MB'
      rootfs_size:
        description: 'RootFS partition size (e.g., 2048)'
        required: false
        default: '2048'

env:
  IMAGE_NAME: immortalwrt/imagebuilder:x86-64-24.10-SNAPSHOT
  BUILD_DIR: ${{ github.workspace }}/imagebuilder
  OUTPUT_DIR: ${{ github.workspace }}/bin

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Prepare directories
        run: |
          mkdir -p ${{ env.BUILD_DIR }}/packages/custom
          mkdir -p ${{ env.OUTPUT_DIR }}
          mkdir -p ${{ env.BUILD_DIR }}/files
          
          # 确保自定义包目录有写入权限
          chmod -R a+rw ${{ env.BUILD_DIR }}/packages/custom

      - name: Copy custom files
        run: |
          # 复制IPK文件到packages目录
          if [ -d "softs" ]; then
            find softs -name '*.ipk' -exec cp {} ${{ env.BUILD_DIR }}/packages/custom/ \;
          fi
          
          # 复制插件列表
          if [ -f "plugins.list" ]; then
            cp plugins.list ${{ env.BUILD_DIR }}/
          fi
          
          # 复制自定义配置文件
          if [ -d "files" ]; then
            cp -R files/* ${{ env.BUILD_DIR }}/files/
          fi
          
          echo "Custom files copied successfully"

      - name: Generate custom package index
        run: |
          # 检查是否有自定义IPK文件
          if [ -n "$(ls -A ${{ env.BUILD_DIR }}/packages/custom/*.ipk 2>/dev/null)" ]; then
            echo "Generating custom package index"
            
            # 使用Docker容器生成索引 - 使用root用户避免权限问题
            docker run --rm --user root \
              -v ${{ env.BUILD_DIR }}/packages/custom:/custom \
              ${{ env.IMAGE_NAME }} \
              /bin/bash -c "cd /custom && opkg-make-index . > Packages && gzip -c Packages > Packages.gz"
            
            echo "Custom package index generated"
          else
            echo "No custom IPK files found, skipping index generation"
          fi

      - name: Pull Docker image
        run: docker pull ${{ env.IMAGE_NAME }}

      - name: Build firmware
        run: |
          # 读取插件列表
          PACKAGES=""
          if [ -f "${{ env.BUILD_DIR }}/plugins.list" ]; then
            # 移除空行和注释
            PACKAGES=$(grep -v '^#' ${{ env.BUILD_DIR }}/plugins.list | grep -v '^$' | tr '\n' ' ')
          fi
          
          docker run --rm \
            -v ${{ env.BUILD_DIR }}:/home/build/openwrt \
            -v ${{ env.OUTPUT_DIR }}:/home/build/openwrt/bin \
            ${{ env.IMAGE_NAME }} \
            /bin/bash -c "
            # 添加自定义软件包源（如果有IPK文件）
            if [ -f '/home/build/openwrt/packages/custom/Packages.gz' ]; then
              echo 'src custom file://packages/custom' >> repositories.conf
            fi
            
            # 更新软件包索引
            ./scripts/feeds update -a
            
            # 设置分区大小
            sed -i \"s/CONFIG_TARGET_ROOTFS_PARTSIZE=.*/CONFIG_TARGET_ROOTFS_PARTSIZE=${{ inputs.rootfs_size }}/\" .config
            
            # 开始构建固件
            make image PACKAGES=\"base-files $PACKAGES\" PROFILE=\"generic\" FILES=\"files/\" \
            CONFIG_TARGET_ROOTFS_PARTSIZE=${{ inputs.rootfs_size }} \
            CONFIG_TARGET_IMAGES_GZIP=y
          "

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware-binaries
          path: ${{ env.OUTPUT_DIR }}/*.gz
          retention-days: 7

      - name: Create release
        uses: softprops/action-gh-release@v1
        if: ${{ inputs.release_tag != 'nightly' }}
        with:
          tag_name: ${{ inputs.release_tag }}
          name: ImmortalWrt Build ${{ inputs.release_tag }}
          files: ${{ env.OUTPUT_DIR }}/*.gz
          draft: false
          prerelease: false

      - name: Upload nightly build
        if: ${{ inputs.release_tag == 'nightly' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: nightly-${{ github.run_id }}
          name: Nightly Build (${{ github.run_id }})
          files: ${{ env.OUTPUT_DIR }}/*.gz
          draft: false
          prerelease: true
