name: Optimized ImmortalWrt Build

concurrency: 
  group: build-${{ github.ref }}
  cancel-in-progress: true

on: workflow_dispatch

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      IMAGEBUILDER_URL: "https://downloads.immortalwrt.org/releases/24.10.1/targets/x86/64/immortalwrt-imagebuilder-24.10.1-x86-64.Linux-x86_64.tar.zst"
      IMAGEBUILDER_ARCHIVE: "immortalwrt-imagebuilder-24.10.1-x86-64.Linux-x86_64.tar.zst"
      IMAGEBUILDER_DIR: "immortalwrt-imagebuilder-24.10.1-x86-64.Linux-x86_64"
      SOFTS_DIR: "softs"
      PLUGINS_FILE: "plugins.list"
      OUTPUT_DIR: "output"
      IMAGE_SIZE: "4096MB"
      ROOTFS_SIZE: "4096"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 修复1：移除APT缓存（因权限问题不可行）
    - name: Install dependencies
      run: |
        sudo apt update -y
        sudo xargs -a dependencies.txt apt install -y
        sudo apt install -y parallel  # 提前安装parallel工具
        sudo timedatectl set-ntp on

    # 修复2：使用更可靠的URL哈希生成方式
    - name: Create URL hash for caching
      id: url-hash
      run: |
        HASH=$(echo -n "$IMAGEBUILDER_URL" | sha256sum | awk '{print $1}')
        echo "url_hash=$HASH" >> $GITHUB_OUTPUT

    # 修复3：确保缓存路径存在
    - name: Cache ImageBuilder
      uses: actions/cache@v4
      id: cache-imagebuilder
      with:
        path: |
          ${{ env.IMAGEBUILDER_ARCHIVE }}
          ${{ env.IMAGEBUILDER_DIR }}
        key: ${{ runner.os }}-imagebuilder-${{ steps.url-hash.outputs.url_hash }}
        restore-keys: |
          ${{ runner.os }}-imagebuilder-

    - name: Download ImmortalWrt ImageBuilder
      if: steps.cache-imagebuilder.outputs.cache-hit != 'true'
      run: |
        wget -q --show-progress $IMAGEBUILDER_URL
        tar -I zstd -xPf $IMAGEBUILDER_ARCHIVE --no-overwrite-dir

    - name: Prepare custom IPK packages
      run: |
        mkdir -p $IMAGEBUILDER_DIR/packages/custom
        if [ -d "$SOFTS_DIR" ]; then
          find "$SOFTS_DIR" -type f -name "*.ipk" -exec cp -v {} "$IMAGEBUILDER_DIR/packages/custom/" \;
        fi
        echo "==== Copied IPK files ===="
        ls -lh $IMAGEBUILDER_DIR/packages/custom/

    # 修复4：移除冗余的parallel安装
    - name: Parse plugins and packages
      id: get_pkgs
      run: |
        BASE_PKGS=""
        if [ -f "$PLUGINS_FILE" ]; then
          BASE_PKGS=$(grep -vE '^\s*#|^\s*$' "$PLUGINS_FILE" | parallel -j $(nproc) echo {} | tr '\n' ' ')
        fi

        CUSTOM_PKGS=""
        if [ -d "$IMAGEBUILDER_DIR/packages/custom" ]; then
          for ipk in "$IMAGEBUILDER_DIR/packages/custom/"*.ipk; do
            [ -e "$ipk" ] || continue
            pkgname=$(basename "$ipk" | awk -F_ '{print $1}')
            CUSTOM_PKGS="$CUSTOM_PKGS $pkgname"
          done
        fi

        ALL_PKGS=$(echo "$BASE_PKGS $CUSTOM_PKGS" | tr ' ' '\n' | sort -u | xargs)
        echo "FINAL_PKGS=$ALL_PKGS" >> $GITHUB_ENV

    - name: Build firmware with increased space
      run: |
        set -euxo pipefail
        cd $IMAGEBUILDER_DIR
        echo "CONFIG_TARGET_ROOTFS_PARTSIZE=$ROOTFS_SIZE" >> .config
        
        sudo make -j $(($(nproc))) image \
          PACKAGES="$FINAL_PKGS" \
          FILES=../files \
          IMAGE_SIZE="$IMAGE_SIZE"
        
        mkdir -p ../$OUTPUT_DIR
        sudo cp -Pv bin/targets/x86/64/* ../$OUTPUT_DIR/

    - name: Verify firmware files
      run: |
        echo "==== Firmware files ===="
        ls -lh ${{ env.OUTPUT_DIR }}
        for file in ${{ env.OUTPUT_DIR }}/*; do
          if [[ $file == *.tar.gz ]]; then
            tar -tzf "$file" >/dev/null || echo "⚠️ Corrupted file: $file"
          fi
        done

    - name: Upload firmware to Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: immortalwrt-x86-64
        path: ${{ env.OUTPUT_DIR }}

    - name: Generate release tag
      id: release_tag
      run: |
        echo "tag=auto-build-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release_tag.outputs.tag }}
        name: "ImmortalWrt x86_64 Firmware ${{ steps.release_tag.outputs.tag }}"
        body: |
          Automated build includes:
          - Base packages: `${{ env.FINAL_PKGS }}`
          - Custom IPKs from softs directory
        files: ${{ env.OUTPUT_DIR }}/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Clean up
      if: always()
      run: |
        sudo rm -rf ${{ env.IMAGEBUILDER_DIR }}
        sudo rm -f ${{ env.IMAGEBUILDER_ARCHIVE }}
