name: ImmortalWrt Build Workflow优化

concurrency: 
  group: build-${{ github.ref }}
  cancel-in-progress: true

on: workflow_dispatch

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      IMAGEBUILDER_URL: "https://downloads.immortalwrt.org/releases/24.10.1/targets/x86/64/immortalwrt-imagebuilder-24.10.1-x86-64.Linux-x86_64.tar.zst"
      IMAGEBUILDER_ARCHIVE: "immortalwrt-imagebuilder-24.10.1-x86-64.Linux-x86_64.tar.zst"
      IMAGEBUILDER_DIR: "immortalwrt-imagebuilder-24.10.1-x86-64.Linux-x86_64"
      SOFTS_DIR: "softs"
      PLUGINS_FILE: "plugins.list"
      OUTPUT_DIR: "output"
      IMAGE_SIZE: "4096MB"
      ROOTFS_SIZE: "4096"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install dependencies
      run: |
        sudo apt update -y
        sudo xargs -a dependencies.txt apt install -y
        sudo timedatectl set-ntp on
        # 关键修复：添加32位库支持[7](@ref)[8](@ref)
        sudo dpkg --add-architecture i386
        sudo apt install -y zstd pv rsync coreutils libc6:i386 libstdc++6:i386
        
    - name: Create URL hash for caching
      id: url-hash
      run: |
        HASH=$(echo -n "$IMAGEBUILDER_URL" | sha256sum | awk '{print $1}')
        echo "url_hash=$HASH" >> $GITHUB_OUTPUT

    - name: Cache ImageBuilder
      uses: actions/cache@v4
      id: cache-imagebuilder
      with:
        path: |
          ${{ env.IMAGEBUILDER_ARCHIVE }}
          ${{ env.IMAGEBUILDER_DIR }}
        key: ${{ runner.os }}-imagebuilder-${{ steps.url-hash.outputs.url_hash }}
        restore-keys: |
          ${{ runner.os }}-imagebuilder-

    - name: Download and extract ImageBuilder
      if: steps.cache-imagebuilder.outputs.cache-hit != 'true'
      run: |
        FREE_SPACE=$(df -h . | awk 'NR==2 {print $4}')
        echo "可用磁盘空间: $FREE_SPACE"
        wget -q --show-progress --continue --tries=3 --waitretry=10 $IMAGEBUILDER_URL
        zstd -d -c $IMAGEBUILDER_ARCHIVE | tar -xvf - --no-overwrite-dir
        find $IMAGEBUILDER_DIR -type f | head -5 | xargs -I{} ls -lh {}

    - name: Fix directory permissions
      run: |
        sudo chown -R $USER:$USER ${{ env.IMAGEBUILDER_DIR }}
        find ${{ env.IMAGEBUILDER_DIR }} -type d -exec chmod 755 {} \;

    - name: Prepare custom IPK packages
      run: |
        mkdir -p $IMAGEBUILDER_DIR/packages/custom/base
        if [ -d "$SOFTS_DIR" ]; then
          find "$SOFTS_DIR" -type f -name "*.ipk" -exec cp -v {} "$IMAGEBUILDER_DIR/packages/custom/base/" \;
        fi
        sudo chown -R $USER:$USER $IMAGEBUILDER_DIR/packages/custom

    # ========= 关键修复区域 =========
    - name: Initialize package index
      run: |
        cd ${{ env.IMAGEBUILDER_DIR }}
        mkdir -p keys
        touch keys/secret.key
        
        # 关键修复：禁用签名验证[11](@ref)[12](@ref)
        export SIGNED_PACKAGES=0
        export FORCE_UNSAFE_CONFIGURE=1
        export PKG_HASH=skip
        
        # 安全生成索引
        if ! make package_index V=s 2>&1 | tee build.log; then
          echo "⚠️ 自动生成失败，尝试手动创建..."
          cd packages
          ../scripts/ipkg-make-index.sh . > Packages
          gzip -9c Packages > Packages.gz
          cd ..
          echo "Package index manually generated" >> build.log
        fi
        
        if ! grep -q "package index generated" build.log; then
          echo "❌ 包索引生成失败 - 详细错误:"
          grep -i "error\|fail" build.log || true
          exit 1
        fi
        echo "✅ 包索引成功生成"
    # ===============================

    - name: Parse plugins and packages
      id: get_pkgs
      run: |
        BASE_PKGS=""
        if [ -f "$PLUGINS_FILE" ]; then
          BASE_PKGS=$(grep -vE '^\s*#|^\s*$' "$PLUGINS_FILE" | parallel -j $(nproc) echo {} | tr '\n' ' ')
        fi

        CUSTOM_PKGS=""
        if [ -d "$IMAGEBUILDER_DIR/packages/custom/base" ]; then
          for ipk in "$IMAGEBUILDER_DIR/packages/custom/base/"*.ipk; do
            [ -e "$ipk" ] || continue
            pkgname=$(basename "$ipk" | awk -F_ '{print $1}')
            CUSTOM_PKGS="$CUSTOM_PKGS $pkgname"
          done
        fi

        ALL_PKGS=$(echo "$BASE_PKGS $CUSTOM_PKGS" | tr ' ' '\n' | sort -u | xargs)
        echo "FINAL_PKGS=$ALL_PKGS" >> $GITHUB_ENV

    - name: Build firmware
      run: |
        set -euxo pipefail
        cd $IMAGEBUILDER_DIR
        
        # 磁盘空间监控
        while true; do
          df -h .
          sleep 30
        done &
        DISK_MONITOR_PID=$!
        
        echo "CONFIG_TARGET_ROOTFS_PARTSIZE=$ROOTFS_SIZE" >> .config
        
        export FORCE_UNSAFE_CONFIGURE=1
        export PKG_HASH=skip
        
        make -j $(($(nproc))) V=sc image \
          PACKAGES="$FINAL_PKGS" \
          FILES=../files \
          IMAGE_SIZE="$IMAGE_SIZE"
        
        kill $DISK_MONITOR_PID
        
        mkdir -p ../$OUTPUT_DIR
        cp -Pv bin/targets/x86/64/* ../$OUTPUT_DIR/

    - name: Upload firmware to Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: immortalwrt-x86-64
        path: ${{ env.OUTPUT_DIR }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: auto-build-$(date +'%Y%m%d-%H%M%S')
        name: "ImmortalWrt x86_64 Firmware $(date +'%Y%m%d-%H%M%S')"
        body: "Automated build with custom packages"
        files: ${{ env.OUTPUT_DIR }}/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
