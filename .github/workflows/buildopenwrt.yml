name: Stable ImmortalWrt Build

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04  # ✅ 修复：使用支持 opkg-utils 的 LTS 版本
    timeout-minutes: 180

    env:
      IMAGEBUILDER_URL: "https://downloads.immortalwrt.org/releases/24.10.1/targets/x86/64/immortalwrt-imagebuilder-24.10.1-x86-64.Linux-x86_64.tar.zst"
      IMAGEBUILDER_ARCHIVE: "immortalwrt-imagebuilder.tar.zst"
      IMAGEBUILDER_DIR: "immortalwrt-imagebuilder"
      SOFTS_DIR: "softs"
      PLUGINS_FILE: "plugins.list"
      OUTPUT_DIR: "output"
      IMAGE_SIZE: "4096MB"
      ROOTFS_SIZE: "4096"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install build tools
      run: |
        sudo apt update -y
        sudo apt install -y curl zstd pv opkg-utils
        
    - name: Cache ImageBuilder
      uses: actions/cache@v4
      id: cache
      with:
        path: |
          ${{ env.IMAGEBUILDER_ARCHIVE }}
          ${{ env.IMAGEBUILDER_DIR }}
        key: ${{ runner.os }}-immortal-${{ env.IMAGEBUILDER_URL }}

    - name: Download & extract ImageBuilder
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        set -euxo pipefail
        curl --fail --retry 5 --retry-delay 10 -L $IMAGEBUILDER_URL -o $IMAGEBUILDER_ARCHIVE
        zstd -t $IMAGEBUILDER_ARCHIVE
        zstd -d -c $IMAGEBUILDER_ARCHIVE | tar -x --no-overwrite-dir -f -
        mv *-x86_64.Linux-x86_64 $IMAGEBUILDER_DIR

    - name: Validate cached ImageBuilder
      if: steps.cache.outputs.cache-hit == 'true'
      run: |
        test -d ${{ env.IMAGEBUILDER_DIR }}/bin -a -f ${{ env.IMAGEBUILDER_DIR }}/Makefile

    - name: Fix permissions
      run: |
        sudo chown -R $USER:$USER ${{ env.IMAGEBUILDER_DIR }}
        find ${{ env.IMAGEBUILDER_DIR }} -type d -exec chmod 755 {} \;

    - name: Copy custom IPKs
      run: |
        mkdir -p $IMAGEBUILDER_DIR/packages/custom
        cp -v $SOFTS_DIR/*.ipk $IMAGEBUILDER_DIR/packages/custom/ || echo "无自定义 IPK"
        sudo chown -R $USER:$USER $IMAGEBUILDER_DIR/packages/custom

    - name: Prepare package list
      id: pkg
      run: |
        BASE="$(grep -vE '^\s*(#|$)' $PLUGINS_FILE || echo)"
        CUSTOM="$(cd $IMAGEBUILDER_DIR/packages/custom && ls *.ipk 2>/dev/null | sed 's/_.*//')"
        ALL="$(echo $BASE $CUSTOM | tr ' ' '\n' | sort -u | xargs)"
        echo "FINAL_PKGS=$ALL" >> $GITHUB_ENV
        echo "Packages to build: $ALL"

    - name: Build firmware
      run: |
        set -euxo pipefail
        cd $IMAGEBUILDER_DIR
        echo "CONFIG_TARGET_ROOTFS_PARTSIZE=${ROOTFS_SIZE}" >> .config
        make -j$(nproc) image \
          PACKAGES="$FINAL_PKGS" \
          FILES=../files \
          IMAGE_SIZE="$IMAGE_SIZE"
        mkdir -p ../$OUTPUT_DIR
        cp -v bin/targets/x86/64/* ../$OUTPUT_DIR/

    - name: Clean build garbage
      run: |
        cd $IMAGEBUILDER_DIR
        make clean
        rm -rf staging_dir/ build_dir/ tmp/

    - name: List firmware
      run: |
        echo "输出文件："
        ls -lh $OUTPUT_DIR

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: immortalwrt-firmware
        path: $OUTPUT_DIR

    - name: Create tag
      id: tagger
      run: |
        echo "tag=build-$(date +'%Y%m%d-%H%M')" >> $GITHUB_OUTPUT

    - name: Publish release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tagger.outputs.tag }}
        name: "ImmortalWrt Build ${{ steps.tagger.outputs.tag }}"
        body: |
          • 包含插件: ${{ env.FINAL_PKGS }}
          • 自定义 IPK：$(ls $IMAGEBUILDER_DIR/packages/custom || echo "None")
        files: $OUTPUT_DIR/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
